# apiVersion specifies the Kubernetes API version this object belongs to.
# For Deployments, it's typically 'apps/v1'.
apiVersion: apps/v1
# kind specifies the type of Kubernetes object you are creating.
# In this case, it's a 'Deployment'.
kind: Deployment
metadata:
  # name is a unique identifier for your Deployment within its namespace.
  name: my-web-app-deployment
  # labels are key-value pairs used to organize and select Kubernetes objects.
  # These labels apply to the Deployment itself.
  labels:
    app: my-web-app
    environment: development

spec:
  # replicas specifies the desired number of Pod replicas (instances) for your application.
  # The Deployment controller will ensure this many Pods are running.
  replicas: 2
  # selector defines how the Deployment finds which Pods it manages.
  # It must match the labels defined in the Pod template.
  selector:
    matchLabels:
      app: my-web-app # This must match the Pod's labels below
  # template describes the Pods that the Deployment will create and manage.
  # This is essentially a Pod template.
  template:
    metadata:
      # labels here apply to the Pods created by this Deployment.
      # These labels are crucial for the Deployment's selector to work.
      labels:
        app: my-web-app # This label is matched by the Deployment's selector
    spec:
      # containers defines the container(s) that will run inside each Pod.
      containers:
      - name: my-web-app-container # Name of the container (unique within the Pod)
        image: nginx:latest       # Docker image to use for the container
        ports:
        - containerPort: 80       # The port the container listens on
        resources:
          # Define resource requests and limits for the container.
          # Requests are guaranteed, limits are the maximum allowed.
          requests:
            memory: "64Mi"
            cpu: "250m" # 250 milliCPU = 0.25 CPU core
          limits:
            memory: "128Mi"
            cpu: "500m" # 500 milliCPU = 0.5 CPU core